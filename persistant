#!/usr/bin/env python3

import argparse
import datetime
import json
import logging
import pickle
import re
import subprocess
import time

from subprocess import Popen

import RSyncBackup



parser = argparse.ArgumentParser(description='Backup remote files.')
parser.add_argument('-d', '--daily', dest='daily', action='store_true', help='creates a new daily backup')
parser.add_argument('-p', '--persist', dest='persist', action='store_true', help='tries to perform missed backups')
parser.add_argument('-i', '--incremental', dest='incremental', action='store_true', help='performs an incremental backup instead of a new backup')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='explains what is being done')
parser.add_argument('-t', '--test', dest='test', action='store_true', help='runs rsync in test mode')
parser.add_argument('--ping', dest='ping_path', action='store', type=str, help='specify a path for ping, default:"/bin/ping"')
parser.add_argument('--rsync', dest='rsync_path', action='store', type=str, help='specify a path for rsync, default:"/usr/bin/rsync"')

args = parser.parse_args()

if args.verbose:
    logging.basicConfig(level=logging.INFO)
else:
    logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger("Persistant")

if args.ping_path:
    ping_path = args.ping_path
else:
    ping_path = "/bin/ping"

if args.rsync_path:
    rsync_path = args.rsync_path
else:
    rsync_path = "/usr/bin/rsync"

try:
    missed_backups = pickle.load(open('missed.p', 'rb'))
    logger.info("missed backups: {}".format(missed_backups))
except Exception:
    missed_backups = []

def get_targets(name):
    '''reads and parses the json targets file and returns its contents '''
    return json.load(open(name))

def is_host_up(ip):
    '''pings the specified ip to see if it is up'''
    ping_response = Popen([ping_path, "-c1", "-w1", "-q", ip], stdout=subprocess.PIPE).stdout.read()
    return re.search(b"100% packet loss", ping_response) is None

def backup_host(target, type):
    '''backs up the specified host using rsync'''
    arguments = '-ab'
    logger.info('backing up {}@{}:{} to {}'.format(target['user'], target['ip'], target['source'], target['destination']))
    logger.info("excluding: {}".format(target['exclude']))

    now = datetime.datetime.now()
    if args.test:
        backup = RSyncBackup.RSyncBackup(rsync=rsync_path + ' ' + arguments, lastRunFile='backup.lrf', testRun=1)
    else:
        backup = RSyncBackup.RSyncBackup(rsync=rsync_path + ' ' + arguments, lastRunFile='backup.lrf')

    if type == 'new':
        backup.backup(source=target['user'] + "@" + target['ip'] + ":" + target['source'], destination=target['destination'] + "{}-{}-{}-{}-{}-{}".format(now.year, now.month, now.day, now.hour, now.minute, now.second), excludeList=target['exclude'])

    if type == 'incremental':
        dest = target['destination']
        if dest[-1] == '/':
            dest += 'full_backup'
        else:
            dest += '/full_backup'

        backup.backup(source=target['user'] + "@" + target['ip'] + ":" + target['source'], destination=dest, excludeList=target['exclude'])

    backup.finish()

def persistant_backup(type):
    '''attempts to complete failed backups'''
    persisted_backups = []
    for target in missed_backups:
        if is_host_up(target['ip']):
            backup_host(target, type)
        else:
            logger.warn('host {} is not up'.format(target['ip']))
            persisted_backups.append(target)
    pickle.dump(persisted_backups, open('missed.p', 'wb'))

def daily_backup(type):
    '''performs a new daily backup'''
    missed_backups = []
    for target in targets:
        if is_host_up(target['ip']):
            backup_host(target, type)
        else:
            logger.warn('host {} is not up'.format(target['ip']))
            missed_backups.append(target)
        time.sleep(5)
    pickle.dump(missed_backups, open('missed.p', 'wb'))


if not (args.daily or args.persist):
    logger.error('You need to provide at least one argument')
else:
    targets = get_targets('targets.json')

if args.daily:
    if args.incremental:
        daily_backup('incremental')
    else:
        daily_backup('new')

if args.persist:
    if args.incremental:
        persistant_backup('incremental')
    else:
        persistant_backup('new')

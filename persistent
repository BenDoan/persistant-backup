#!/usr/bin/env python3

"""
Persistently backs up mobile devices over the network.

Usage:
    persistent (retry|new) [options]

Options:
    -i, --incremental           performs an incremental backup instead of a full backup
    -v, --verbose               increase verbosity
    -t FILE, --targets FILE     manually specify a targets file
    --silent                    silences any ouput
    --ping FILE                 specify a path for ping
    --rsync FILE                specify a path for rsync
"""

import os
import sys
SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, SCRIPT_PATH + "/libs") #adds the libs folder to the import path

import argparse
import datetime
import json
import logging
import pickle
import re
import subprocess
import time

from subprocess import Popen

from docopt import docopt
import RSyncBackup


LOG_FORMAT = '%(asctime)s - %(levelname)s - %(message)s'

if __name__ == '__main__':
    args = docopt(__doc__)

if args['--verbose']:
    logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
elif args['--silent']:
    logging.basicConfig(level=logging.CRITICAL, format=LOG_FORMAT)
else:
    logging.basicConfig(level=logging.WARNING, format=LOG_FORMAT)

#setup logging
logger = logging.getLogger("Persistent")
handler = logging.FileHandler(SCRIPT_PATH + '/persistent.log')
handler.setLevel(logging.INFO)
formatter = logging.Formatter(LOG_FORMAT)
handler.setFormatter(formatter)
logger.addHandler(handler)

#specify ping and rsync paths
if args['--ping']:
    ping_path = args['--ping']
else:
    ping_path = "/bin/ping"

if args['--rsync']:
    rsync_path = args['--rsync']
else:
    rsync_path = "/usr/bin/rsync"

#load the dictionary of missed backups
try:
    missed_backups = pickle.load(open(SCRIPT_PATH + '/missed.p', 'rb'))
    logger.info("missed backups: {}".format(missed_backups))
except Exception:
    missed_backups = []

def get_targets(name):
    '''reads and parses the json targets file and returns its contents '''
    return json.load(open(SCRIPT_PATH + "/" + name))

def is_host_up(ip):
    '''pings the specified ip to see if it is up'''
    return subprocess.getstatusoutput("ssh -q {} exit".format(ip))[0] == 0

def backup_host(target, type):
    '''backs up the specified host using rsync'''
    arguments = '-ab'
    logger.info('backing up {}@{}:{} to {}'.format(target['user'], target['ip'], target['source'], target['destination']))
    logger.info("excluding: {}".format(target['exclude']))

    now = datetime.datetime.now()
    backup = RSyncBackup.RSyncBackup(rsync=rsync_path + ' ' + arguments, lastRunFile='backup.lrf')

    if type == 'new':
        backup.backup(source=target['user'] + "@" + target['ip'] + ":" + target['source'], destination=target['destination'] + "{}-{}-{}-{}-{}-{}".format(now.year, now.month, now.day, now.hour, now.minute, now.second), excludeList=target['exclude'])

    if type == 'incremental':
        dest = target['destination']
        if dest[-1] == '/':
            dest += 'full_backup'
        else:
            dest += '/full_backup'

        backup.backup(source=target['user'] + "@" + target['ip'] + ":" + target['source'], destination=dest, excludeList=target['exclude'])

    backup.finish()

def retry_backup(type):
    '''attempts to complete failed backups'''
    persisted_backups = []
    for target in missed_backups:
        if is_host_up(target['ip']):
            backup_host(target, type)
        else:
            logger.warn('host {} is not up'.format(target['ip']))
            persisted_backups.append(target)
    pickle.dump(persisted_backups, open(SCRIPT_PATH + '/missed.p', 'wb'))

def new_backup(type):
    '''performs a new backup'''
    missed_backups = []
    for target in targets:
        if is_host_up(target['ip']):
            backup_host(target, type)
        else:
            logger.warn('host {} is not up'.format(target['ip']))
            missed_backups.append(target)
        time.sleep(3)
    pickle.dump(missed_backups, open(SCRIPT_PATH + '/missed.p', 'wb'))


targets = get_targets('targets.json')

if args['new']:
    if args['--incremental']:
        new_backup('incremental')
    else:
        new_backup('new')

if args['retry']:
    if args['--incremental']:
        retry_backup('incremental')
    else:
        retry_backup('new')
